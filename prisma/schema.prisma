generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  password      String?
  image         String?
  provider      Provider?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  googleId      String?
  name          String?
  emailVerified DateTime?
  role          UserRole  @default(USER)
  accounts      Account[]
  messages      Message[]
  addedSongs    Song[]    @relation("addedBy")
  song          Song[]    @relation("user")
  hostedSpaces  Space[]   @relation("hostedBy")
  votes         Vote[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Space {
  id           String       @id @default(cuid())
  name         String
  description  String
  url          String       @unique @default("")
  hostId       String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  chatDisabled Boolean      @default(true)
  currentSong  CurrentSong?
  messages     Message[]
  songs        Song[]
  host         User         @relation("hostedBy", fields: [hostId], references: [id])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  userId    String
  spaceId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Song {
  id            String       @id @default(cuid())
  url           String
  extractedId   String
  title         String?
  artist        String?
  duration      Int?
  active        Boolean      @default(false)
  played        Boolean      @default(false)
  playedTs      DateTime?
  spaceId       String
  userId        String
  addedBy       String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  bigImg        String?
  smallImg      String?
  spaceRunning  Boolean      @default(true)
  bidAmount     Decimal?     @default(0) @db.Decimal(7, 5)
  currentStream CurrentSong?
  addedByUser   User         @relation("addedBy", fields: [addedBy], references: [id])
  space         Space        @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user          User         @relation("user", fields: [userId], references: [id])
  votes         Vote[]
}

model CurrentSong {
  id      String  @id @default(uuid())
  userId  String
  spaceId String? @unique
  songId  String? @unique
  song    Song?   @relation(fields: [songId], references: [id])
  space   Space?  @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

model Vote {
  id     String @id @default(cuid())
  userId String
  songId String
  song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, songId])
}

enum UserRole {
  ADMIN
  USER
}

enum Provider {
  Google
  Credentials
}
